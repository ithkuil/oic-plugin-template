#!/bin/bash

# This code gets installed and run on the client machine,
# for example the developer's laptop.
# The client could also be a backend server for a SaaS.

# Code that runs whenever ANY plugin is installed.
# Check to see that this is a command that applies to this plugin.
# Sets default config values, installs programs appropriate
# for this platform, etc.
plugin_template_install() {
  if [[ "$1" == "plugin-template" ]]; then
    echo "Now installing plugin-template plugin.."
  fi
}

plugin_template_cmds=(mycmd myothercmd)

declare -A plugin_template_mycmd
plugin_template_mycmd=( [syntax]=mycmd [descr]="Just an example (does nothing)" )
plugin_template_mycmd[morehelp]=$(cat <<_END
This is where we give a brief explanation and
then show some good examples:
_END
)
plugin_template_mycmd[examples]=$(cat <<_END
oic mycmd	# Run the mycmd command
_END
)

declare -A plugin_template_myothercmd
plugin_template_myothercmd=( [syntax]=myother [descr]="Another example" )
plugin_template_myothercmd[morehelp]=$(cat <<_END
Explanation of myothercmd.
_END
)

plugin_template_myothercmd[examples]=$(cat <<_END
oic myothercmd	# Run the myothercmd command
_END
)

echo -e "${plugin_template_mycmd[syntax]}\t\t\t${plugin_template_mycmd[descr]}"
echo "${plugin_template_mycmd[morehelp]}"
echo "${plugin_template_mycmd[examples]}"


# Single line command summary
function plugin_template_help_line()
{
  echo -e "  \e[4mmycmd \e[0m                                           \e[4mJust an example (does nothing)\e[0m"
}

# The rest of the command explanation. Be sure to include examples
plugin_template_help_more() {
  echo -e "    This is where we give a brief explanation and"
  echo -e "    then show some good examples:" 
  echo -e "    Examples:"
  echo -e "      \e[1moic mycmd \e[0m\e[36m# Run the mycmd command"
}

# This will be executed every time an oic command is run.
# Check to see if it is a command that this plugin handles
# and run if it matches.
plugin_template_run() {
  echo -e "Hello from plugin_template_run()\n"
  if [[ "$1" == "mycmd" ]]; then
    echo -e "Now running mycmd defined by plugin-template.\n"
    echo -e "Done.\n"
  fi
}


# Plugins can also optionally filter output.
# This is an example that uses ANSI to
# reverse the background/foreground
# colors for the output of all commands.
plugin_template_filter() {
  j=0
  while read line
  do
    j=$((j+1))
    echo -e "\e[7m$line" | less
    printf "\n"
  done
  #echo -e "\e[0m"
}


